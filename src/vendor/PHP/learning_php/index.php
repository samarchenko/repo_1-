<!DOCTYPE html>
<html lang="en">
<form method= "POST" action = "/">
    Ваше ім'я: <input type="text" name="name">
    <input type="submit">
</form>    
<?php
// вивчення мови програмування PHP.
// вивчення за посиланням --- https://youtube.com/playlist?list=PLVi0WaQ2dK6WylSAAlsU-zxxmxmHbw5ja&si=oks33aK09h7QfWeD


/* PHP (Hypertext Preprocessor --- гіпертекстовий препроцесор) - це скриптова мова програмування, 
 яка використовується для розробки веб-додатків та взаємодії з веб-серверами.
 PHP є однією з найпопулярніших мов для розробки веб-сайтів і веб-додатків 
*/


/* попередня назва:(Personal Home Page Tools - Інструменти особистої домашньої сторінки)
 --- скриптова мова програмування, була створена для 
 генерації HTML-сторінок на стороні вебсервера. 
*/



// лекція №1.Вступ.Зміна.

  /* зміна оголошється за допомогою символа "$" */

  $var1 = "Hello world!";
  echo($var1), "\n";

  /*PHPinfo (документація) — Виводить інформацію про поточну конфігурацію та стан PHP.
  Сюди входить інформація з PHP.*/
  //дізнатися чи php підключений
  //phpinfo();

//.

echo "\n";


// лекція №2.Змінні.Функції.

  /* echo(аргумент) --- це є стандартна функція */
  $varname = "hello";
  echo($varname), "\n";

  function sayHello ($var){
    echo($var), "\n";
  }

  sayHello("Hell");


  function sayHello2 ($LastName, $FirstName){
    echo ("Привіт $FirstName $LastName"), "\n";
  }

  sayHello2("Ivanonych", "Andriy");



  /* . --- це є обєднання  */ 
  /* 
     "" --- можна писати змінні 
     '' --- попадають як тип данних str(строка,текст) 
  */

  function message ($LastName, $FirestName){
    $helloTest = "Hello " . $LastName . " " . $FirestName;
    echo($helloTest), "\n";
  }

  message("Kosiak", "Dmytro");
//.

echo "\n";


// лекція №3.Типи даних.

  /* PHP підтримує такі типи даних: 
    String / Рядок
    Integer / Ціле число
    Float (числа з плаваючою комою - також називаються подвійними)
    Boolean / Булеві (логічні значення)
    Array / Масив
    Object / Об’єкт
    NULL / Нуль
    Resource / Ресурс
 */

  $change = "how are you?"; // тип даних str(строка,текст)
  /* var_dump --- змінний дамп */
  /* Функція відображає структуровану інформацію про один або кілька виразів,
  включаючи їх тип та значення. Масиви та об'єкти аналізуються рекурсивно з різним відступом 
  у значень візуального відображення структури. */
  var_dump($change);
  /* var_dump --- показує тип даних,вміст елемента і довжину елемента */
  echo("\n");

  $number = 1000; // тип дпних int --- integer(ціле число)
  var_dump($number);
  echo "\n";

  $number2 = 0.5; // тип даних float(дробовий)
  var_dump($number2);
  echo("\n");


  $bool = true; // тип даних bool(true and false) --- істина і брехня 
  var_dump($bool);
  echo("\n");


  /* тип даних array --- масив */
  $array = ["anton","Ivan","Andriy","Taras","Oleksander","Oleg",];
  $array2 = [1,2,3,4,5,6];
  var_dump($array);
  var_dump($array2);
  echo "\n";


  /* тип даних null це є нуль --- 0 нічого немає */
  $null = null;
  var_dump($null);
  echo ("\n");

//.

echo "\n";


// лекція №4.String. Текстовий тип даних.Основні функції з текстом.
  $v_a_r = 'hello Anton';
  //strlen() --- strlen(string,строка) – дозволяє визначити довжину рядка.

  /* strlen() - це вбудована функція в мові програмування PHP, 
  і вона використовується для обчислення кількості символів (байтів) у рядку.
  Функція strlen() приймає один параметр - рядок (строку), 
  і повертає ціле число, яке представляє довжину цього рядку. */

  // length(довжина) = strlen()
  echo('Довжина:' . ' ' . strlen($v_a_r)), "\n";


  $text = "Це рядок з декількома символами.";
  $length = strlen($text);
  echo "Довжина рядка: $length","\n"; // Виводить кількість символів у рядку


  $v_a_r_2 = 'hi Anton';
  // str_word_count(string word count) --- кількість слів рядка.
  echo ('Кількість слів:' . ' ' . str_word_count($v_a_r_2) . ' ' . 'в слові:' . ' ' . $v_a_r_2),"\n";


  $var_text = 'what do you do';
  // strrev(string reversed) --- рядок перевернутий 
  /* використовується для обертання (реверсу) рядка. 
  Ця функція приймає один параметр - рядок і повертає новий рядок, 
  у якому символи в початковому рядку відображаються у зворотньому порядку. 
  Тобто, ця функція перевертає рядок в зворотньому напрямку. */
  echo(strrev($var_text)),"\n";



  $text = "Privit,cvit!";
  $reversedText = strrev($text);
  echo $reversedText,"\n"; // Виводить "!tivc,tivirP"


  $var_text2 = 'Privat str';
  // strpos(зміна або текст, індекс до якого хочемо обрізати) --- обрізає текст і показує довжину тексту, якій він обрізав.
  echo('Довжина обрізу:' . ' ' . strpos($var_text2, 'tr')),"\n";



  $text = "Це рядок з кількома словами. Це ще одне слово.";
  $newText = str_replace("слово", "термін", $text);
  echo $newText,"\n";
  //str_replace(замінюваний_рядок, новий_рядок, джерело_рядок [, кількість_замін]);
  //str_replace(що ми хочемо змінити, нове слово, де замінити ) --- замінити рядок

  /* Функція str_replace() в мові програмування PHP використовується для заміни всіх 
  входжень певного рядка або символу на інший рядок в іншому рядку. 
  Ось синтаксис цієї функції: */
//.

echo "\n";


// лекція №5.Які бувають числа та оператори.
  $nub = 4568964;
  /* var_dump(зміна_звалище,смітника,мотлоху) --- показує тип даних,вміст елемента і довжину елемента */
  var_dump($nub);

  var_dump(is_int($nub));
  // is_int(пере.Укр - є цілим числом) --- воно запитує чи є це цілим числом(int) і відповідає бульовим типом(bools - true,false).


  $nub2 = 0.5;
  var_dump(is_float($nub2));


  $nub3 = 99999999999999999999999;
  var_dump($nub3);
  //покаже: float(1.0E+23) томущо в php є діапазон чисел, тому буде зберігатися як float а не int.


  //Assignment Operators --- Оператори присвоєння
  /* 
    =   Basic Assignment
    +=  Addition
    -=  Subtraction
    *=  Multiplication
    /=  Division
    %=  Modulus
  */

  //базові оператори
  //збільщити число на 10. 
  $numb = 50;
  $numb = $numb + 10;
  var_dump($numb);

  //спрощений варіант збільшення на 20.
  $numb2 = 50;
  $numb2 += 20;
  var_dump($numb2);


  $cos = acos(360);
  var_dump($cos);
  var_dump(is_nan($cos));


  $numeric = '100';
  //is_numeric --- є числовим.запитує чи є це число(number) 
  var_dump(is_numeric($numeric));

  $numeric__ = '100' + 10;
  var_dump($numeric__);

  $str_int = '100';
  //$number_int = (int)$str_int; --- дія яку переводять з строки(str) в ціле число(int) 
  $number_int = (int)$str_int;
  var_dump($number_int);


  $str_int_2 = '500';
  //$number_int_2 = intval($str_int_2); --- дія яку переводять з строки(str) в ціле число(int)
  // intval --- інтервал.
  $number_int_2 = intval($str_int_2);
  var_dump($number_int_2);
//.

echo "\n";

// лекція №6.Умовні переходи.Оператори.Оператори порівняння.Логічні Блоки(if,elseif,else).switch.
  $let = rand(1,100);
  $let_2 = rand(1,100);
  // rand(min,max) - random --- випадковий(від мінімального числа,до максимального) 
  echo("1 Зміна: $let"),"\n";
  echo("2 Зміна: $let_2"),"\n";


  
  //if,else,elseif --- логічні блоки
  //оператори --- if,else,elseif.
  //if --- якщо,чи,крім.(true)
  //else --- інакше,інше,крім.(false)
  //elseif --- абож. (true)
  if($let > 50){
    echo ("1 зміна більше > 50, але 2 зміна менше або дорівнює =< 50"),"\n";
  } elseif($let_2 > 50){
    echo("2 зміна більше > 50, але 1 зміна менше або дорівнює =< 50"),"\n";
  } else{
    echo("1 та 2 зміна менше або дорівнює =< 50"),"\n";
  }


  /*Конструкція elseif в PHP використовується для встановлення додаткових умов, 
  які перевіряються після основної умови if та перед можливим блоком else. 
  Це дозволяє перевіряти кілька умов поспіль і виконувати певний блок коду, 
  якщо умова виявиться істинною.*/

  echo "\n";

  $const = rand(1,15);
  echo($const),"\n";
  if($const > 10){
    echo ("$const більше > за 10"),"\n";
  } elseif($const > 5) {
    echo("$const більше більше > за 5"),"\n";
  } else {
    echo ("$const менше за всі дійсні числа."),"\n";
  }

  echo "\n";



  $random = rand(0,4);
  echo ($random),"\n";

  // switch --- перемикач,вимикач
  /* switch в PHP - це конструкція, яка дозволяє замінити послідовність 
  if...elseif...else, коли потрібно перевірити одну змінну на відповідність 
  декільком можливим значенням. */

  //case --- справа,аргументація,відмінок,коробка,процес.(true)
  /* Кожен case вказує на конкретне значення, яке ми порівнюємо зі змінною. 
  Якщо значення змінної співпадає з будь-яким із case, виконується код у цьому блоку case. */

  //break --- перерва,вилім
  /* break використовується для припинення виконання 
  switch після виконання блоку коду підпункту case. */

  //default --- за замовчуванням,стандарт.(false)
  /*default - це варіант за замовчуванням, який виконається, 
  якщо значення змінної не відповідає жодному із case.*/


  switch ($random) {
    case 1:
      echo("зміна має значення 1"),"\n";
    break;
    
    case 2:
      echo("зміна має значення 2"),"\n";
    break;

    case 3:
      echo("зміна має значення 3"),"\n";
    break;
    
    default:
      echo("жодного значення не співпало"),"\n"; 
    break;
  };

  echo "\n";


  /* символ == є оператором порівняння, який використовується для порівняння двох значень з урахуванням їхньої рівності за значенням, а не за типом даних.
  Коли ви використовуєте ==, PHP порівнює значення лівого операнда з правим. 
  Якщо вони однакові за значенням, умова вважається істинною і виконується відповідний блок коду. */
  $a = rand(0,1);
  // оператор порівняння "==" перевіряє чи дорівнює певному значенню(однакові за значенням).
  if($a == 1){
    echo("yes"),"\n";
  }
  else{
    echo("No"),"\n";
  }; 

  echo "\n";


  /* оператор === - це строге порівняння, яке порівнює не лише значення, 
  але й типи даних об'єктів. Він перевіряє, чи два операнди рівні як за значенням, 
  так і за типом даних. */

  $b = 1;
  $b1 = 1;
  // оператор порівняння "===" перевіряє чи однакове за значенням і за типом даних 
  if($b === $b1){
    echo ("true"),"\n";
  }
  else{
    echo("false"),"\n"; 
  };


  echo("\n");



  /* Оператор != в мові програмування PHP використовується для перевірки нерівності 
  двох значень. Він повертає true, якщо два операнди не рівні, і false, 
  якщо вони рівні за значенням. */

  /* Оператор != допомагає порівнювати значення змінних чи об'єктів, 
  не звертаючи уваги на їх типи даних. */
  $qwerty = 1;
  $qwertyu = '1';
  if($qwerty != $qwertyu){
    echo ("true"),"\n";
  }
  else{
    echo("false"),"\n";
  };


  echo "\n";


  /* Оператор !== в мові програмування PHP є строгим оператором нерівності. 
  Він порівнює не лише значення двох операндів, але й їхні типи даних. */
  $php = 1;
  $php_2 = '1';
  if($php !== $php_2){
    echo ("Правдива інформація"),"\n";
  }
  else {
    echo("Недостовірна інформація"),"\n";
  }


  echo "\n";


  $x = 20;
  $x_2 = 20; 
  /* >= --- більше дорівнює, <= --- менше дорівнює,
  <>(оператор нерівності,недорівнює) --- тоже саме, що і != */
  if($x <= $x_2){
    echo ("Правильно"),"\n";
  }
  else {
    echo ("Неправильно"),"\n";
  }





//.

echo "\n";

// лекція №7.Цикли.
  /* У PHP цикли - це конструкції, які дозволяють вам виконувати блок 
  коду повторно певну кількість разів або до виконання певної умови. 
  PHP підтримує кілька типів циклів, включаючи for, while, do-while, foreach. */

  /* for --- для; while --- поки; do-while --- робити поки; foreach --- для кожного */

  $i = 0;
  //while(Умова) --- поки(умова)
  //while(Умова) - це цикл, який дозволяє виконувати блок коду, доки задана умова є істинною. 
  while($i < 10){
    $i += 1; // тоже саме що і написати так: $i = $i + 1;
    echo("while:" . $i),"\n";
  }

  echo "\n";

  /* do - це частина синтаксису циклу do-while. Цей цикл використовується для 
  виконання блоку коду принаймні один раз, а потім повторює виконання цього блоку, 
  доки задана умова залишається істинною. */
  // do --- робити.
  do{
    echo ("do-while:" . $i),"\n";
    $i += 1;
  } while ($i < 10);

  echo "\n";

  //for --- для
  /*for - це цикл, який дозволяє вам виконувати блок коду певну кількість разів. 
  Синтаксис циклу for виглядає наступним чином:
     for (ініціалізація; умова; крок) {
       Код, який виконується певну кількість разів
      } */
  /* Ініціалізація: Це вираз або команда, яка виконується один раз перед входженням в цикл.
  Вона ініціалізує лічильник або змінну, яка буде використовуватися для управління циклом.*/

  /* Умова: Це вираз, який перевіряється перед кожною ітерацією циклу. 
  Якщо умова є істинною, цикл продовжується; якщо умова є хибною, цикл завершується. */

  /* Крок: Це вираз, який виконується після кожної ітерації циклу. 
  Він зазвичай використовується для зміни лічильника або інших значень, 
  що впливають на умову циклу. */

  for($w = 0; $w < 10; $w++){
    echo("for:" . $w . " ");
  }

  echo "\n";

  /* break корисний, коли потрібно негайно припинити виконання циклу чи вихідити 
  з конструкції switch, наприклад, при досягненні певної умови або обробці певного випадку. */
  for($y = 1; $y <= 5; $y++){
    echo("break:" . $y),"\n";
    break; // break --- перерва. Це щоб зупинити цикл.
  }

  echo "\n";

  /* continue - це оператор, який використовується в межах циклів для переходу до 
  наступної ітерації без виконання залишку коду в поточній ітерації. 
  Його використання дозволяє пропустити частину коду і перейти до наступної ітерації циклу. */
  for($u = 0; $u <= 5; $u++){
    if($u == 2){
      continue; // continue --- пропустити,продовжувати,вистояти,відновлювати.
    }
    echo("continue:" . $u),"\n";
  }

  echo "\n";
  //яка різниця між do-while і while.
    while(1 == 2){
      echo('not do,hello'),"\n"; 
    }

    do{
      echo ("do, hello"),"\n";
    } while(1 == 2);
  //.

  echo "\n","\n";

  /* foreach --- для кожного */
  /* foreach в PHP - це цикл, який дозволяє ітерувати через елементи масиву або об'єкта. 
  Його синтаксис виглядає наступним чином: 
  foreach ($array as $value) {
    // Код, що виконується для кожного елемента масиву (або значення в об'єкті)
  }
  $array "перек.укр - Масив": Масив або об'єкт, який ви хочете переглядати.
  $value "перек.укр - Зміна": Змінна, в яку буде присвоєно поточне значення елемента масиву 
  (або значення в об'єкті) на кожній ітерації.*/
  // as --- як.
  // array --- масив.

  $colors = array("Red", "Green", "Blue");
    foreach ($colors as $color) {
    // код, який виконується для кожного елемента масиву 
    echo "foreach " . $color,"\n";
  }

  echo "\n";

  $person = array("name" => "Anton", "age" => 16, "city" => "New York");
  foreach ($person as $key => $value) {
    echo "foreach " . $key . ': ' . $value . "\n";
  }
//.

echo "\n";

// лекція №8.Масив.
  // 1 спосіб визивання масиву.
  $arr = array("Jon", "Anton", "Peter", );
  // 2 спосіб визивання масиву.
  $arr_ = ["Jon", "Anton", "Peter"];
  var_dump($arr);
  echo "\n";

 // ВИДИ МАСИВІВ --- 1)ІНДЕКСОВАНИЙ; 2)АСОЦІАТИВНИЙ.
   /*Індексований масив в PHP - це масив, у якого ключі представлені цілими числами
   (індексами), які починаються з нуля і ідуть впорядковано 
   відповідно до порядку елементів у масиві. 
   Кожен елемент масиву доступний за своїм індексом.*/
   $indexed_array = ["Oleg", "Andriy", "Anton"]; 


   /* Термін "асоціативний масив" в PHP вказує на масив, 
   де ключі елементів не обов'язково повинні бути числовими індексами, 
   а можуть бути будь-якими рядковими чи числовими значеннями. 
   Кожен елемент асоціативного масиву представляє собою пару "ключ" => "значення". */
   $associative_array = array("Oleg" => 30, "Andriy" => 28, "Anton" => 16);
 //.
  echo($indexed_array),"\n";
  echo("ім'я:" . " " . $indexed_array[0]),"\n";

  echo "\n";

  echo($associative_array),"\n";
  echo("вік:" . " " . $associative_array["Oleg"]),"\n";

  echo "\n";

 // масив + цикл(foreach)..
      // foreach --- для кожного.
      foreach($indexed_array as $val){
        echo("foreach: " . $val),"\n";
      }

      foreach($indexed_array as $key => $val){
        echo("(indexed_array)Елемент під номером: $key; Ім'я: $val;"),"\n";
      }

      foreach($associative_array as $key => $val){
        echo("(associative_array) Вік: $val; Ім'я: $key;"),"\n";
      }
 //..

  echo "\n";

  $newArray_int = [2467, 3432, 0];
  $newArray_str = ["Anton" => 16, "Oleg" => 30];
  /*sort --- сортувати */
  /* sort --- сртується від найменшого до найбільшого */
  sort($newArray_int);
  var_dump($newArray_int);

  echo "\n";

  /* reverse sort(rsort) --- зворотне сортування */
  /* rsort --- від найбільшого до найменшого */
  rsort($newArray_int);
  var_dump($newArray_int);


  /* associative sort(asort) --- асоціативне сортування */
  asort($newArray_str);
  var_dump($newArray_str);


  /* associative reverse sort(arsort) --- асоціативний зворотний сортування */
  arsort($newArray_str);
  var_dump($newArray_str);


  /* Багатовимірний Масив */
  /* Масив який в якості своїх елементів містить інші масиви називається багатовимірним масивом. 
  Найчастіше використовуються двовимірні масиви. */

  $someCrazy = [10 => ["Anton", 16]];
  var_dump($someCrazy);
//.

echo "\n";

// лекція №9.Додамо елементи масива, POST/GET, Суперглобальні масиви.

  // Додавання елементів в масив..
    // додаємо новий індекс і значення в масив.
    $array_globals = [1, 2, 3];
    /* $array_globals[3] = 2546834839; 
    $array_globals --- назва масива котрий хочемо додати новий ключ і значення. 
    [3] --- додаємо новий індекс в масив тобто "3" індекс */
    /* = 2546834839 --- після дорівнює це значення яке ми хочемо додати в індекс під номером "3". */
    $array_globals[3] = 2546834839;
    var_dump($array_globals);
    echo "\n";
  //..

  // $GLOBALS --- ГЛОБАЛІ.

  /* У PHP глобальна змінна $GLOBALS - це асоціативний масив, 
  який містить всі глобальні змінні, доступні у скрипті. 
  Ключами цього масиву є імена змінних, а значеннями - їхні значення. */

  $GLOBALS['x'] = 10;
  echo ($GLOBALS['x']),"\n";

  // Суперглобал.Суперглобальні Масиви...
    /* У PHP термін "суперглобальні масиви" вказує на змінні, які є глобальними в 
    усіх областях видимості скрипта і мають спеціальне призначення для різних завдань. 
    Суперглобальні масиви є асоціативними масивами, тобто масивами, де ключі є рядками. */

    /* $_SERVER: Масив, який містить інформацію про сервер та оточення. 
    Наприклад, $_SERVER['HTTP_USER_AGENT'] містить інформацію про браузер користувача. */
    var_dump($_SERVER); 
    echo "\n","\n";
    echo($_SERVER["GNOME_TERMINAL_SERVICE"]),"\n";


    //$_GET: Масив, який містить всі дані, передані через URL-параметри (HTTP GET-запит).
    echo($_GET['name']),"\n";
    var_dump($_GET);


    /* $_POST: Масив, який містить всі дані, передані через HTTP POST-запит. */
    echo('$_POST: '),"\n";
    if($_SERVER['REQUEST_METHOD'] == 'POST'){
      echo ("Привіт, " . $_POST["name"]);
    }
  //...
//.
?>
</html>