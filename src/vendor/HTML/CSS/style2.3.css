body{
    margin: 0;
    font-family: 'Barriecito', cursive;
    background-color: forestgreen;
}

.perent{
    display: flex;
    justify-content: center; /* justify-content --- виправдати-вміст */
    align-items: center; /* align-items: center,start,end --- вирівнювання-елементів:центер,початок,кінец */
    padding: 5px;
    border: 1px solid black;
}

/* Властивість justify-content вирівнює елементи гнучкого контейнера, 
коли елементи не використовують ввесь доступний простір на головній осі контейнера 
(по горизонталі). Це робиться після того, як застосовуються розміри і автоматичні відступи, 
за винятком ситуації, коли принаймні у одного елемента flex-grow більше нуля. */


/* Властивість align-items вирівнює елементи всередині рядків 
гумового контейнера в перпендикулярному (вертикальному) напрямку. */


.child{
    width: 100px;
    padding: 10px;
    margin: 0;
    color: white;
}

.child:first-of-type{
    background-color: greenyellow;
}

.child:nth-of-type(2){
    background-color: slateblue;
}

.child:last-of-type{
    background-color: violet;
}








/* CSS flexbox — це CSS3 веб модуль. Flex дозволяє автоматично організовувати відповідні 
елементи в контейнері залежно від розміру екрана та дає змогу використовувати більш 
ефективний спосіб верстки, вирівнювання й розподілу вільного місця між елементами у контейнері, 
навіть коли їх розмір невідомий і/або динамічний. */








.perent-2{
    height: 2000px;
    padding: 10px 0;
    margin-top: 50px;
    background-color: indigo;
    font-size: 36px;
    color: white;
}

.child-new{
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 10px;
    height: 100px;
    width: 400px;
    font-size: 36px;
    color: white;        
}

.child-1{
    background-color: red;
    position: static; /* position: static --- положення: статичне */
}
/* коли ми вказуємо положенння(position) ми можемо використовувати такі властивості - "top,bottom",right,left,z-index */
/* static - статичний,стандартний --- положення(position) стандартне(static) має всі елементи за умовчанням */
/* Властивість position визначає тип позиціювання 
відносно вікна браузера або інших елементів: static , relative , 
absolute , fixed або sticky (статичний, відносний, абсолютний, фіксований або клейкий). */


.child-2{
    background-color: blue;
    position: relative; /* position:reletive --- положення:відносне,умовний */
    top: 20px; /* top --- зверху */
}
/* relative - відносне позиціонування елемента. В даному випадку елемент, як завжди, 
розміщується щодо свого поточного положення в потоці документа, тобто візуальних змін не видно. */


.child-3{
    background-color: green;
    position: absolute; /* position: absolute --- позиція: абсолютна */
    z-index: 2;
    left: 40px;
}
/* Властивість z-index визначає порядок стека елемента. 
Іншими словами, Ви можете розмістити елемент на сторінці вище іншого елементу або перед ним. */
/* z-index --- буде задіяний тобі коли як position буде не static що в 1 елемента і 2 елемента */

/* absolute - Абсолютне позиціонування робить дві речі: Елемент зникає з того місця, 
де він має бути і знову позиціонується. Інші елементи розташовуються так, 
ніби цього елемента ніколи не було */


.child-4{
    background-color: black;
    position: relative;
    z-index: 3;
}

.child-5{
    background-color: yellow;
    position: fixed; /* position: fixed --- позиція:фіксований; */
    right: 0;
}


/* Fixed Position у CSS
Це значення зафіксує положення вашого елемента на екрані навіть під час прокручування(мишкою,тачпадом) у браузері. */



.child-6{
    background-color: blueviolet;
    position: sticky; /* position: sticky --- позиція:липкий,клейкий */
    top: 0;
}

/* sticky --- такий сами як і fixed він залищається як статичний елемент а 
коли починаємо рухати мишкою,тачпадом він стає як fixed  */

/* "Липкий" елемент - це елемент, якому ми задали position: sticky. 
Елемент стане плаваючим, як тільки область видимості досягне певної позиції, 
наприклад top: 0px . */



.child-7{
    background-color: greenyellow;
}

.child-8{
    background-color: white;
    color: black;
}




.text{
    font-size: 22px;
    line-height: 33px;  /* line-height --- висота лінії */
    margin: 0px 0px 30px 0px;
}

/* Псевдокласи (:)– це ключові слова, які додаються до CSS селекторів і 
змінюють їх стан та положення внаслідок дій користувачів. В якості прикладу 
можна навести текстове посилання, яка змінює 
свій колір чи розмір при наведенні на нього курсора миші. */

/* Псевдоелемент(::) у CSS — це ключове слово, яке додається до селектора, 
яке дозволяє стилізувати певну частину вибраного елемента. Наприклад, псевдоелемент ::first-line 
може бути використаний для зміни шрифту першого рядка абзацу */

.text::first-line{ /* irst-line --- перша лінія */
    color: red;
}

.text::first-letter{ /* first-letter --- перша літера */
    color: blue;
    font-size: 55px;
}

/* Псевдоелемент ::first-line задає стиль першого рядка форматованого тексту. */

.list{

}

.list li{
    font-size: 22px;
    margin: 0px 0px 20px 0px;
    list-style-type: none; /* список-стилів-тип:немає */
}
/* list-style-type: задає тип маркерів для використання у списку,
наприклад квадратні або круглі маркери для неупорядкованого списку, або цифри, літери або 
римські цифри для впорядкованого списку. */



/* У CSS ::before створює псевдоелемент, який є першим нащадком обраного елемента. 
Часто використовується для додавання косметичного вмісту елемент за допомогою властивості content. */

/* before --- застосовується для відображення бажаного контенту до(раніше) вмісту елемента, 
до якого він додається */
.list li::before{ /* before --- раніше,до */
    content: "";
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: red;
    display: inline-block;
    margin: 0px 10px 0px 0px;
}


/* У CSS ::after створює псевдоелемент, який є останнім нащадком обраного елемента. 
Часто використовується для додавання косметичного вмісту елемент за допомогою властивості content .
За промовчанням є інлайновим. */

/* after --- застосовується для відображення бажаного контенту після вмісту елемента, 
до якого він додається */
.list li::after{ /* after --- після */
    content: "";
    width: 10px;
    height: 10px;
    background-color: blue;
    margin: 0px 0px 0px 10px;
    display: inline-block;
}
