body{
    margin: 0;
}




/* Абсолютні одиниці довжини: cm(centimeters - сантиметри), 
mm(millimeters - міліметри), in(inches - дюйми), px(pixels - пікселі), 
pt(points - балів), pc(picas - пікас) */


/* Відносні одиниці довжини: em , ex , ch , rem , vw , vh , vmin , vmax , % . */



.test{
    width: 100px; /* px(Pixel - Піксель) --- абсолютна виличина(завжди статичні) */ 
    height: 100px; /* 38px = 1см  */
    background-color: red;
}

.test p{
    color: white;
    padding: 25px;
    text-align: center; /* вирівнювання-тексту:центр; */ 
}

.test-interest{ /* % --- залежать від свого батьківського блоку */
    width: 50%; /* % --- відносна виличина  */
    height: 50%; /* елемент який вказаний відцотками буде змінюватися по розмірам екрану */
    background-color: blue;
}

.test-interest p{
    color: white;
    text-align: center;
}




/* vw --- залежить від  ширини екрану */
/* vh --- залежить від  висота екрану */
.test-2{
    width: 50vw; /* vw(vwidth) --- ширина екрану */ /* Відносно 1% ширини вікна(екрана) перегляду */
    height: 50vh; /* vh(vheight) --- висота екрану */ /* Відносно 1% висоти вікна(екрана) перегляду* */
    background-color: blueviolet;
}

html{
    font-size: 18px; /* розмір шрифту */
    font-family: 'Open Sans', sans-serif;
}


/* Відносно розміру шрифту елемента (2em означає 2-кратний розмір поточного шрифту) */
.test-3{ /* em --- орінтується тільки на батьківський елемент і перемножається */
    font-size: 2em; /* 2em успабковує батьківського елемента тобто fonst-size:16px і це виходить 16*2=32 */
}

.test-3-2{
    font-size: 2em;
}

.test-4{
    font-size: 4rem; /* rem --- завжди буде успадковуватися від тегу <html>) від батьківського НЕ БУДЕ успадковуватися */
}

#perent-id{ /* найбільш пріорітетним) 1 місце по пріорітетності */
    color: pink;
}

.perent{ /* 2 місце по пріорітетності */
    color: blue;
}

body div h1{ /* 3 місце по пріорітетності */
    color: green;
}

/* Конкретна Пріоритетність --- чім конкрітніше ми позначаємо селектор ти більше він стає пріорітетним */
div h1{ /* і колір буде червоний бо ви вказали більш конкретніше тобто позначили клас "perent" */
    color: red; /* 4 місце по пріорітетності */
}


/* Чім конкретніше ти зазначаєш селектор, тим більше пріорітетність він буде мати!!! */


/* Пріоритетність --- буде важатися тоді коли нишче написаний код(зверху вниз) */
/* Пріоритетність --- це послідня властивість і значення яку дали елементу */
h1{ /* 5 місце по тріорітетності */
    color: yellow !important; /* !important --- !важливо */
}


/* Пріорітетність по селекторам:
1) !important --- !важливо
2) inline-style --- вбудований стиль "Стилі, які прописані в середині html за атрибутом" (<p> style="color: red;"</p> )
3) id(#)
4) class(.)
5) tag --- тег "за назвою тега"(наприклад: p,h1,h2,a,i,div,html,body,*,li тощо) 
*/







/* Відступи margin-top і margin-bottom іноді об'єднуються в один, 
з розміром, що дорівнює найбільшому з них (або розміру одного, 
якщо вони рівні). Ця поведінка відома як схлопування зовнішніх відступів (margin collapsing) */

/* (margin collapsing - маржа згортається) --- це накладання внутрішніх відступів вверх і вниз "margin-top;margin-bottom", тобто вони не сумуються */
/* бокові відступи сумуються,додаються */

.verse{
    width: 276px;
    height: 256px;
    padding: 70px;
    margin-left: 33%;
    margin-right: 33%;
    margin-bottom: 200px;
}

.verse-text {
    text-align: center; /* text-align --- вирівнювання тексту */ 
    font-weight: 600; /* font-weight --- вага шрифту */ 
    padding: 40px;
    border: 3px black solid;
    border-radius: 40px;
    margin-bottom: 14px;
}

.verse-text p{
    color: black;
}




.perent-child{
    display: flex;
    padding: 5px;
    margin-bottom: 30px;
    border: 1px solid black;
}

.child{
    width: 100px;
    flex-grow: 1; /* flex-grow --- гнучкий-ріст */
    padding: 10px;
    margin: 0;
    color: white;
}

/* 
CSS властивість flex-grow визначає коефіціент збільшення гнучкого елемента,
по відношенню до інших гнучких елементів, всередині того ж контейнера, 
якщо всередині нього залишається вільний простір.
*/

/* first-of-type --- перший-з-типу або першого типу */
.child:first-of-type{ /* Опис CSS псевдоклас :first-of-type знаходить першого нащадка свого типу серед дітей батька */
    background-color: red;
}

.child:nth-of-type(2){ /* CSS псевдоклас :nth-of-type() знаходить один або більше елементів із заданим тегом, ґрунтуючись на їх позиції серед групи сусідніх елементів */
    background-color: blue;
}

/* last-of-type --- останній-з-типу або останнього типу */
.child:last-of-type{ /* CSS псевдоклас :last-of-type знаходить останнього нащадка із заданим тегом у списку дітей батьківського елемента. */
    background-color: green;
}





.perent-child-2{
    display: flex;
    padding: 5px;
    margin-bottom: 30px;
    border: 1px solid black;
}

.child-2{
    width: 200px;
    padding: 10px;
    margin: 0;
    color: white;
}


/* Властивість flex-shrink встановлює коефіцієнт стиснення гнучких елементів в контейнері 
по відношенню до інших гнучких елементів в тому ж контейнері, якщо в ньому залишається вільний простір. 
Гнучкі елементи автоматично зменшують свою ширину, якщо вона більша за ширину батьківського елементу. */

.child-2:first-of-type{
    background-color: yellow;
    flex-shrink: 1; /* гнучке-скорочування  */
}

.child-2:nth-of-type(2){
    background-color: black;
    flex-shrink: 4; /* гнучке-скорочування */
}

.child-2:last-of-type{
    background-color: orange;
    flex-shrink: 9; /* гнучке-скорочування */
}



.perent-child-3{
    display: flex;
    flex-wrap: wrap; /* flex-wrap: wrap ---- гнучко-загорнути:загорнути,обгортка,загортати */ /* завжди пишеться в батьківському едементі. */
    padding: 5px;
    margin-bottom: 30px;
    border: 1px solid black;
}

/* Властивість flex-wrap визначає, чи елементи мають розташовутися 
примусово на одному рядку або можуть бути перенесені на наступний рядок. */

.child-3{
    width: 200px;
    padding: 10px;
    margin: 0;
    color: white;
}

.child-3:first-of-type{
    background-color: purple;
}

.child-3:nth-of-type(2){
    background-color: pink;
}

.child-3:last-of-type{
    background-color: gray;
}

.block{
    display: flex;
    padding: 5px;
    margin-bottom: 30px;
    border: 1px solid black;
}

.block-paragraph{
    width: 100px;
    padding: 10px;
    margin: 0;
    color: white;
}


/* CSS властивість order визначає порядок, що використовується для розміщення flex елементів у їх flex контейнері. */

.block-paragraph:first-of-type{
    background-color: aqua;
    order: 3; /* order --- порядок,упорядковування*/
}

.block-paragraph:nth-of-type(2){
    background-color: lime;
    order: 1; /* order --- порядок */
}

.block-paragraph:last-of-type{
    background-color:cornflowerblue;
    order: 2; /* order --- порядок */
}
